<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="997"><g><title>libsystem_kernel.dylib`__fcntl (1 samples, 0.10%)</title><rect x="0.0000%" y="245" width="0.1003%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.10%)</title><rect x="0.1003%" y="213" width="0.1003%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3503%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.50%)</title><rect x="0.2006%" y="213" width="0.5015%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="5"/><text x="0.4506%" y="223.50"></text></g><g><title>pikselsel`DYLD-STUB$$free (2 samples, 0.20%)</title><rect x="0.7021%" y="213" width="0.2006%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="2"/><text x="0.9521%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (35 samples, 3.51%)</title><rect x="1.3039%" y="197" width="3.5105%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="35"/><text x="1.5539%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.60%)</title><rect x="4.8144%" y="197" width="0.6018%" height="15" fill="rgb(232,128,0)" fg:x="48" fg:w="6"/><text x="5.0644%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.20%)</title><rect x="5.4162%" y="197" width="0.2006%" height="15" fill="rgb(207,160,47)" fg:x="54" fg:w="2"/><text x="5.6662%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (2 samples, 0.20%)</title><rect x="5.4162%" y="181" width="0.2006%" height="15" fill="rgb(228,23,34)" fg:x="54" fg:w="2"/><text x="5.6662%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.20%)</title><rect x="5.4162%" y="165" width="0.2006%" height="15" fill="rgb(218,30,26)" fg:x="54" fg:w="2"/><text x="5.6662%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (4 samples, 0.40%)</title><rect x="5.6169%" y="197" width="0.4012%" height="15" fill="rgb(220,122,19)" fg:x="56" fg:w="4"/><text x="5.8669%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.10%)</title><rect x="6.0181%" y="197" width="0.1003%" height="15" fill="rgb(250,228,42)" fg:x="60" fg:w="1"/><text x="6.2681%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.40%)</title><rect x="6.7202%" y="181" width="0.4012%" height="15" fill="rgb(240,193,28)" fg:x="67" fg:w="4"/><text x="6.9702%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.20%)</title><rect x="7.1214%" y="181" width="0.2006%" height="15" fill="rgb(216,20,37)" fg:x="71" fg:w="2"/><text x="7.3714%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (35 samples, 3.51%)</title><rect x="7.3220%" y="181" width="3.5105%" height="15" fill="rgb(206,188,39)" fg:x="73" fg:w="35"/><text x="7.5720%" y="191.50">lib..</text></g><g><title>pikselsel`&lt;alloc::string::String as core::clone::Clone&gt;::clone (15 samples, 1.50%)</title><rect x="10.8325%" y="181" width="1.5045%" height="15" fill="rgb(217,207,13)" fg:x="108" fg:w="15"/><text x="11.0825%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (10 samples, 1.00%)</title><rect x="11.3340%" y="165" width="1.0030%" height="15" fill="rgb(231,73,38)" fg:x="113" fg:w="10"/><text x="11.5840%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (5 samples, 0.50%)</title><rect x="11.8355%" y="149" width="0.5015%" height="15" fill="rgb(225,20,46)" fg:x="118" fg:w="5"/><text x="12.0855%" y="159.50"></text></g><g><title>pikselsel`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (66 samples, 6.62%)</title><rect x="6.1184%" y="197" width="6.6199%" height="15" fill="rgb(210,31,41)" fg:x="61" fg:w="66"/><text x="6.3684%" y="207.50">pikselsel..</text></g><g><title>pikselsel`DYLD-STUB$$malloc (4 samples, 0.40%)</title><rect x="12.3370%" y="181" width="0.4012%" height="15" fill="rgb(221,200,47)" fg:x="123" fg:w="4"/><text x="12.5870%" y="191.50"></text></g><g><title>pikselsel`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (23 samples, 2.31%)</title><rect x="12.7382%" y="197" width="2.3069%" height="15" fill="rgb(226,26,5)" fg:x="127" fg:w="23"/><text x="12.9882%" y="207.50">p..</text></g><g><title>pikselsel`DYLD-STUB$$free (1 samples, 0.10%)</title><rect x="15.0451%" y="197" width="0.1003%" height="15" fill="rgb(249,33,26)" fg:x="150" fg:w="1"/><text x="15.2951%" y="207.50"></text></g><g><title>pikselsel`alloc::fmt::format::format_inner (4 samples, 0.40%)</title><rect x="15.1454%" y="197" width="0.4012%" height="15" fill="rgb(235,183,28)" fg:x="151" fg:w="4"/><text x="15.3954%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.30%)</title><rect x="19.0572%" y="181" width="0.3009%" height="15" fill="rgb(221,5,38)" fg:x="190" fg:w="3"/><text x="19.3072%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 1.00%)</title><rect x="19.3581%" y="181" width="1.0030%" height="15" fill="rgb(247,18,42)" fg:x="193" fg:w="10"/><text x="19.6081%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.50%)</title><rect x="20.3611%" y="181" width="0.5015%" height="15" fill="rgb(241,131,45)" fg:x="203" fg:w="5"/><text x="20.6111%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.50%)</title><rect x="20.3611%" y="165" width="0.5015%" height="15" fill="rgb(249,31,29)" fg:x="203" fg:w="5"/><text x="20.6111%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.60%)</title><rect x="20.8626%" y="181" width="0.6018%" height="15" fill="rgb(225,111,53)" fg:x="208" fg:w="6"/><text x="21.1126%" y="191.50"></text></g><g><title>pikselsel`&lt;image::imageops::sample::FloatNearest as num_traits::cast::ToPrimitive&gt;::to_u8 (13 samples, 1.30%)</title><rect x="21.4644%" y="181" width="1.3039%" height="15" fill="rgb(238,160,17)" fg:x="214" fg:w="13"/><text x="21.7144%" y="191.50"></text></g><g><title>pikselsel`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (16 samples, 1.60%)</title><rect x="22.7683%" y="181" width="1.6048%" height="15" fill="rgb(214,148,48)" fg:x="227" fg:w="16"/><text x="23.0183%" y="191.50"></text></g><g><title>pikselsel`&lt;alloc::string::String as core::fmt::Display&gt;::fmt (2 samples, 0.20%)</title><rect x="25.5767%" y="165" width="0.2006%" height="15" fill="rgb(232,36,49)" fg:x="255" fg:w="2"/><text x="25.8267%" y="175.50"></text></g><g><title>pikselsel`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (7 samples, 0.70%)</title><rect x="25.7773%" y="165" width="0.7021%" height="15" fill="rgb(209,103,24)" fg:x="257" fg:w="7"/><text x="26.0273%" y="175.50"></text></g><g><title>pikselsel`&lt;str as core::fmt::Display&gt;::fmt (2 samples, 0.20%)</title><rect x="26.4794%" y="165" width="0.2006%" height="15" fill="rgb(229,88,8)" fg:x="264" fg:w="2"/><text x="26.7294%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.70%)</title><rect x="28.9870%" y="149" width="0.7021%" height="15" fill="rgb(213,181,19)" fg:x="289" fg:w="7"/><text x="29.2370%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.30%)</title><rect x="31.0933%" y="117" width="0.3009%" height="15" fill="rgb(254,191,54)" fg:x="310" fg:w="3"/><text x="31.3433%" y="127.50"></text></g><g><title>pikselsel`DYLD-STUB$$realloc (3 samples, 0.30%)</title><rect x="31.3942%" y="117" width="0.3009%" height="15" fill="rgb(241,83,37)" fg:x="313" fg:w="3"/><text x="31.6442%" y="127.50"></text></g><g><title>pikselsel`__rdl_realloc (2 samples, 0.20%)</title><rect x="31.6951%" y="117" width="0.2006%" height="15" fill="rgb(233,36,39)" fg:x="316" fg:w="2"/><text x="31.9451%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.10%)</title><rect x="32.0963%" y="101" width="0.1003%" height="15" fill="rgb(226,3,54)" fg:x="320" fg:w="1"/><text x="32.3463%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.40%)</title><rect x="32.6981%" y="69" width="0.4012%" height="15" fill="rgb(245,192,40)" fg:x="326" fg:w="4"/><text x="32.9481%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.40%)</title><rect x="33.0993%" y="69" width="0.4012%" height="15" fill="rgb(238,167,29)" fg:x="330" fg:w="4"/><text x="33.3493%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.50%)</title><rect x="33.5005%" y="69" width="0.5015%" height="15" fill="rgb(232,182,51)" fg:x="334" fg:w="5"/><text x="33.7505%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 1.20%)</title><rect x="34.1023%" y="53" width="1.2036%" height="15" fill="rgb(231,60,39)" fg:x="340" fg:w="12"/><text x="34.3523%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (27 samples, 2.71%)</title><rect x="34.0020%" y="69" width="2.7081%" height="15" fill="rgb(208,69,12)" fg:x="339" fg:w="27"/><text x="34.2520%" y="79.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (14 samples, 1.40%)</title><rect x="35.3059%" y="53" width="1.4042%" height="15" fill="rgb(235,93,37)" fg:x="352" fg:w="14"/><text x="35.5559%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (10 samples, 1.00%)</title><rect x="35.7071%" y="37" width="1.0030%" height="15" fill="rgb(213,116,39)" fg:x="356" fg:w="10"/><text x="35.9571%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (45 samples, 4.51%)</title><rect x="32.3972%" y="85" width="4.5135%" height="15" fill="rgb(222,207,29)" fg:x="323" fg:w="45"/><text x="32.6472%" y="95.50">libsy..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.20%)</title><rect x="36.7101%" y="69" width="0.2006%" height="15" fill="rgb(206,96,30)" fg:x="366" fg:w="2"/><text x="36.9601%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (48 samples, 4.81%)</title><rect x="32.1966%" y="101" width="4.8144%" height="15" fill="rgb(218,138,4)" fg:x="321" fg:w="48"/><text x="32.4466%" y="111.50">libsys..</text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.10%)</title><rect x="36.9107%" y="85" width="0.1003%" height="15" fill="rgb(250,191,14)" fg:x="368" fg:w="1"/><text x="37.1607%" y="95.50"></text></g><g><title>pikselsel`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (78 samples, 7.82%)</title><rect x="29.6891%" y="149" width="7.8235%" height="15" fill="rgb(239,60,40)" fg:x="296" fg:w="78"/><text x="29.9391%" y="159.50">pikselsel`&lt;..</text></g><g><title>pikselsel`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (67 samples, 6.72%)</title><rect x="30.7924%" y="133" width="6.7202%" height="15" fill="rgb(206,27,48)" fg:x="307" fg:w="67"/><text x="31.0424%" y="143.50">pikselsel..</text></g><g><title>pikselsel`alloc::raw_vec::finish_grow (56 samples, 5.62%)</title><rect x="31.8957%" y="117" width="5.6169%" height="15" fill="rgb(225,35,8)" fg:x="318" fg:w="56"/><text x="32.1457%" y="127.50">piksels..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.50%)</title><rect x="37.0110%" y="101" width="0.5015%" height="15" fill="rgb(250,213,24)" fg:x="369" fg:w="5"/><text x="37.2610%" y="111.50"></text></g><g><title>pikselsel`DYLD-STUB$$memcpy (5 samples, 0.50%)</title><rect x="37.5125%" y="149" width="0.5015%" height="15" fill="rgb(247,123,22)" fg:x="374" fg:w="5"/><text x="37.7625%" y="159.50"></text></g><g><title>pikselsel`core::fmt::Formatter::pad_integral (18 samples, 1.81%)</title><rect x="38.0140%" y="149" width="1.8054%" height="15" fill="rgb(231,138,38)" fg:x="379" fg:w="18"/><text x="38.2640%" y="159.50">p..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 1.40%)</title><rect x="41.6249%" y="133" width="1.4042%" height="15" fill="rgb(231,145,46)" fg:x="415" fg:w="14"/><text x="41.8749%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.80%)</title><rect x="43.2297%" y="101" width="0.8024%" height="15" fill="rgb(251,118,11)" fg:x="431" fg:w="8"/><text x="43.4797%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.30%)</title><rect x="44.0321%" y="101" width="0.3009%" height="15" fill="rgb(217,147,25)" fg:x="439" fg:w="3"/><text x="44.2821%" y="111.50"></text></g><g><title>pikselsel`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (15 samples, 1.50%)</title><rect x="43.2297%" y="117" width="1.5045%" height="15" fill="rgb(247,81,37)" fg:x="431" fg:w="15"/><text x="43.4797%" y="127.50"></text></g><g><title>pikselsel`__rdl_alloc (4 samples, 0.40%)</title><rect x="44.3330%" y="101" width="0.4012%" height="15" fill="rgb(209,12,38)" fg:x="442" fg:w="4"/><text x="44.5830%" y="111.50"></text></g><g><title>pikselsel`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (18 samples, 1.81%)</title><rect x="43.0291%" y="133" width="1.8054%" height="15" fill="rgb(227,1,9)" fg:x="429" fg:w="18"/><text x="43.2791%" y="143.50">p..</text></g><g><title>pikselsel`alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="44.7342%" y="117" width="0.1003%" height="15" fill="rgb(248,47,43)" fg:x="446" fg:w="1"/><text x="44.9842%" y="127.50"></text></g><g><title>pikselsel`DYLD-STUB$$memcpy (1 samples, 0.10%)</title><rect x="44.8345%" y="133" width="0.1003%" height="15" fill="rgb(221,10,30)" fg:x="447" fg:w="1"/><text x="45.0845%" y="143.50"></text></g><g><title>pikselsel`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="44.9348%" y="133" width="0.1003%" height="15" fill="rgb(210,229,1)" fg:x="448" fg:w="1"/><text x="45.1848%" y="143.50"></text></g><g><title>pikselsel`core::fmt::Formatter::pad_integral (7 samples, 0.70%)</title><rect x="45.0351%" y="133" width="0.7021%" height="15" fill="rgb(222,148,37)" fg:x="449" fg:w="7"/><text x="45.2851%" y="143.50"></text></g><g><title>pikselsel`core::fmt::Formatter::pad_integral::write_prefix (2 samples, 0.20%)</title><rect x="45.7372%" y="133" width="0.2006%" height="15" fill="rgb(234,67,33)" fg:x="456" fg:w="2"/><text x="45.9872%" y="143.50"></text></g><g><title>pikselsel`core::fmt::num::_&lt;impl core::fmt::LowerHex for i8&gt;::fmt (63 samples, 6.32%)</title><rect x="39.8195%" y="149" width="6.3190%" height="15" fill="rgb(247,98,35)" fg:x="397" fg:w="63"/><text x="40.0695%" y="159.50">pikselse..</text></g><g><title>pikselsel`core::fmt::Formatter::pad_integral (2 samples, 0.20%)</title><rect x="45.9378%" y="133" width="0.2006%" height="15" fill="rgb(247,138,52)" fg:x="458" fg:w="2"/><text x="46.1878%" y="143.50"></text></g><g><title>pikselsel`core::fmt::Formatter::pad_integral::write_prefix (2 samples, 0.20%)</title><rect x="45.9378%" y="117" width="0.2006%" height="15" fill="rgb(213,79,30)" fg:x="458" fg:w="2"/><text x="46.1878%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.90%)</title><rect x="47.2417%" y="133" width="0.9027%" height="15" fill="rgb(246,177,23)" fg:x="471" fg:w="9"/><text x="47.4917%" y="143.50"></text></g><g><title>pikselsel`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.10%)</title><rect x="48.1444%" y="133" width="0.1003%" height="15" fill="rgb(230,62,27)" fg:x="480" fg:w="1"/><text x="48.3944%" y="143.50"></text></g><g><title>pikselsel`DYLD-STUB$$memcpy (2 samples, 0.20%)</title><rect x="48.2447%" y="133" width="0.2006%" height="15" fill="rgb(216,154,8)" fg:x="481" fg:w="2"/><text x="48.4947%" y="143.50"></text></g><g><title>pikselsel`core::fmt::Formatter::pad_integral (4 samples, 0.40%)</title><rect x="48.4453%" y="133" width="0.4012%" height="15" fill="rgb(244,35,45)" fg:x="483" fg:w="4"/><text x="48.6953%" y="143.50"></text></g><g><title>pikselsel`core::fmt::Formatter::pad_integral::write_prefix (5 samples, 0.50%)</title><rect x="48.8465%" y="133" width="0.5015%" height="15" fill="rgb(251,115,12)" fg:x="487" fg:w="5"/><text x="49.0965%" y="143.50"></text></g><g><title>pikselsel`alloc::fmt::format::format_inner (250 samples, 25.08%)</title><rect x="24.3731%" y="181" width="25.0752%" height="15" fill="rgb(240,54,50)" fg:x="243" fg:w="250"/><text x="24.6231%" y="191.50">pikselsel`alloc::fmt::format::format_inn..</text></g><g><title>pikselsel`core::fmt::write (227 samples, 22.77%)</title><rect x="26.6800%" y="165" width="22.7683%" height="15" fill="rgb(233,84,52)" fg:x="266" fg:w="227"/><text x="26.9300%" y="175.50">pikselsel`core::fmt::write</text></g><g><title>pikselsel`core::fmt::num::imp::_&lt;impl core::fmt::Display for u32&gt;::fmt (33 samples, 3.31%)</title><rect x="46.1384%" y="149" width="3.3099%" height="15" fill="rgb(207,117,47)" fg:x="460" fg:w="33"/><text x="46.3884%" y="159.50">pik..</text></g><g><title>pikselsel`core::fmt::Formatter::pad_integral (1 samples, 0.10%)</title><rect x="49.3480%" y="133" width="0.1003%" height="15" fill="rgb(249,43,39)" fg:x="492" fg:w="1"/><text x="49.5980%" y="143.50"></text></g><g><title>pikselsel`core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.10%)</title><rect x="49.3480%" y="117" width="0.1003%" height="15" fill="rgb(209,38,44)" fg:x="492" fg:w="1"/><text x="49.5980%" y="127.50"></text></g><g><title>pikselsel`core::fmt::write (4 samples, 0.40%)</title><rect x="49.4483%" y="181" width="0.4012%" height="15" fill="rgb(236,212,23)" fg:x="493" fg:w="4"/><text x="49.6983%" y="191.50"></text></g><g><title>pikselsel`image::imageops::sample::resize (73 samples, 7.32%)</title><rect x="49.8495%" y="181" width="7.3220%" height="15" fill="rgb(242,79,21)" fg:x="497" fg:w="73"/><text x="50.0995%" y="191.50">pikselsel`..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.70%)</title><rect x="56.4694%" y="165" width="0.7021%" height="15" fill="rgb(211,96,35)" fg:x="563" fg:w="7"/><text x="56.7194%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (7 samples, 0.70%)</title><rect x="56.4694%" y="149" width="0.7021%" height="15" fill="rgb(253,215,40)" fg:x="563" fg:w="7"/><text x="56.7194%" y="159.50"></text></g><g><title>pikselsel`pikselsel::cmd::process_gif (425 samples, 42.63%)</title><rect x="15.5466%" y="197" width="42.6279%" height="15" fill="rgb(211,81,21)" fg:x="155" fg:w="425"/><text x="15.7966%" y="207.50">pikselsel`pikselsel::cmd::process_gif</text></g><g><title>pikselsel`rand::rng::Rng::gen_range (10 samples, 1.00%)</title><rect x="57.1715%" y="181" width="1.0030%" height="15" fill="rgb(208,190,38)" fg:x="570" fg:w="10"/><text x="57.4215%" y="191.50"></text></g><g><title>pikselsel`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (1 samples, 0.10%)</title><rect x="58.0742%" y="165" width="0.1003%" height="15" fill="rgb(235,213,38)" fg:x="579" fg:w="1"/><text x="58.3242%" y="175.50"></text></g><g><title>pikselsel`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (1 samples, 0.10%)</title><rect x="58.0742%" y="149" width="0.1003%" height="15" fill="rgb(237,122,38)" fg:x="579" fg:w="1"/><text x="58.3242%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (1 samples, 0.10%)</title><rect x="58.0742%" y="133" width="0.1003%" height="15" fill="rgb(244,218,35)" fg:x="579" fg:w="1"/><text x="58.3242%" y="143.50"></text></g><g><title>pikselsel`&lt;image::codecs::gif::GifFrameIterator&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 1.91%)</title><rect x="58.1745%" y="149" width="1.9057%" height="15" fill="rgb(240,68,47)" fg:x="580" fg:w="19"/><text x="58.4245%" y="159.50">p..</text></g><g><title>pikselsel`&lt;image::codecs::gif::GifFrameIterator&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next::blend_and_dispose_pixel (14 samples, 1.40%)</title><rect x="60.0802%" y="149" width="1.4042%" height="15" fill="rgb(210,16,53)" fg:x="599" fg:w="14"/><text x="60.3302%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.30%)</title><rect x="61.4845%" y="133" width="0.3009%" height="15" fill="rgb(235,124,12)" fg:x="613" fg:w="3"/><text x="61.7345%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.30%)</title><rect x="61.4845%" y="117" width="0.3009%" height="15" fill="rgb(224,169,11)" fg:x="613" fg:w="3"/><text x="61.7345%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.20%)</title><rect x="63.6911%" y="69" width="0.2006%" height="15" fill="rgb(250,166,2)" fg:x="635" fg:w="2"/><text x="63.9411%" y="79.50"></text></g><g><title>pikselsel`pikselsel::cmd::read_gif (82 samples, 8.22%)</title><rect x="58.1745%" y="197" width="8.2247%" height="15" fill="rgb(242,216,29)" fg:x="580" fg:w="82"/><text x="58.4245%" y="207.50">pikselsel`p..</text></g><g><title>pikselsel`core::iter::adapters::try_process (82 samples, 8.22%)</title><rect x="58.1745%" y="181" width="8.2247%" height="15" fill="rgb(230,116,27)" fg:x="580" fg:w="82"/><text x="58.4245%" y="191.50">pikselsel`c..</text></g><g><title>pikselsel`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (82 samples, 8.22%)</title><rect x="58.1745%" y="165" width="8.2247%" height="15" fill="rgb(228,99,48)" fg:x="580" fg:w="82"/><text x="58.4245%" y="175.50">pikselsel`&lt;..</text></g><g><title>pikselsel`&lt;image::codecs::gif::GifFrameIterator&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 4.91%)</title><rect x="61.4845%" y="149" width="4.9147%" height="15" fill="rgb(253,11,6)" fg:x="613" fg:w="49"/><text x="61.7345%" y="159.50">piksel..</text></g><g><title>pikselsel`gif::reader::Decoder&lt;R&gt;::read_into_buffer (46 samples, 4.61%)</title><rect x="61.7854%" y="133" width="4.6138%" height="15" fill="rgb(247,143,39)" fg:x="616" fg:w="46"/><text x="62.0354%" y="143.50">pikse..</text></g><g><title>pikselsel`gif::reader::Decoder&lt;R&gt;::fill_buffer (46 samples, 4.61%)</title><rect x="61.7854%" y="117" width="4.6138%" height="15" fill="rgb(236,97,10)" fg:x="616" fg:w="46"/><text x="62.0354%" y="127.50">pikse..</text></g><g><title>pikselsel`gif::reader::ReadDecoder&lt;R&gt;::decode_next (28 samples, 2.81%)</title><rect x="63.5908%" y="101" width="2.8084%" height="15" fill="rgb(233,208,19)" fg:x="634" fg:w="28"/><text x="63.8408%" y="111.50">pi..</text></g><g><title>pikselsel`gif::reader::decoder::StreamingDecoder::update (27 samples, 2.71%)</title><rect x="63.6911%" y="85" width="2.7081%" height="15" fill="rgb(216,164,2)" fg:x="635" fg:w="27"/><text x="63.9411%" y="95.50">pi..</text></g><g><title>pikselsel`&lt;weezl::decode::DecodeState&lt;C&gt; as weezl::decode::Stateful&gt;::advance (25 samples, 2.51%)</title><rect x="63.8917%" y="69" width="2.5075%" height="15" fill="rgb(220,129,5)" fg:x="637" fg:w="25"/><text x="64.1417%" y="79.50">pi..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.70%)</title><rect x="66.3992%" y="181" width="0.7021%" height="15" fill="rgb(242,17,10)" fg:x="662" fg:w="7"/><text x="66.6492%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (32 samples, 3.21%)</title><rect x="67.1013%" y="181" width="3.2096%" height="15" fill="rgb(242,107,0)" fg:x="669" fg:w="32"/><text x="67.3513%" y="191.50">lib..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 1.00%)</title><rect x="70.3109%" y="181" width="1.0030%" height="15" fill="rgb(251,28,31)" fg:x="701" fg:w="10"/><text x="70.5609%" y="191.50"></text></g><g><title>pikselsel`&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.30%)</title><rect x="71.3139%" y="181" width="0.3009%" height="15" fill="rgb(233,223,10)" fg:x="711" fg:w="3"/><text x="71.5639%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.60%)</title><rect x="72.4173%" y="165" width="0.6018%" height="15" fill="rgb(215,21,27)" fg:x="722" fg:w="6"/><text x="72.6673%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (28 samples, 2.81%)</title><rect x="73.0191%" y="165" width="2.8084%" height="15" fill="rgb(232,23,21)" fg:x="728" fg:w="28"/><text x="73.2691%" y="175.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (58 samples, 5.82%)</title><rect x="75.8275%" y="165" width="5.8175%" height="15" fill="rgb(244,5,23)" fg:x="756" fg:w="58"/><text x="76.0775%" y="175.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.10%)</title><rect x="81.9458%" y="133" width="0.1003%" height="15" fill="rgb(226,81,46)" fg:x="817" fg:w="1"/><text x="82.1958%" y="143.50"></text></g><g><title>pikselsel`&lt;alloc::string::String as core::clone::Clone&gt;::clone (22 samples, 2.21%)</title><rect x="81.6449%" y="165" width="2.2066%" height="15" fill="rgb(247,70,30)" fg:x="814" fg:w="22"/><text x="81.8949%" y="175.50">p..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (21 samples, 2.11%)</title><rect x="81.7452%" y="149" width="2.1063%" height="15" fill="rgb(212,68,19)" fg:x="815" fg:w="21"/><text x="81.9952%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (18 samples, 1.81%)</title><rect x="82.0461%" y="133" width="1.8054%" height="15" fill="rgb(240,187,13)" fg:x="818" fg:w="18"/><text x="82.2961%" y="143.50">l..</text></g><g><title>pikselsel`DYLD-STUB$$malloc (1 samples, 0.10%)</title><rect x="83.8516%" y="165" width="0.1003%" height="15" fill="rgb(223,113,26)" fg:x="836" fg:w="1"/><text x="84.1016%" y="175.50"></text></g><g><title>pikselsel`DYLD-STUB$$memcpy (3 samples, 0.30%)</title><rect x="83.9519%" y="165" width="0.3009%" height="15" fill="rgb(206,192,2)" fg:x="837" fg:w="3"/><text x="84.2019%" y="175.50"></text></g><g><title>pikselsel`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (127 samples, 12.74%)</title><rect x="71.6148%" y="181" width="12.7382%" height="15" fill="rgb(241,108,4)" fg:x="714" fg:w="127"/><text x="71.8648%" y="191.50">pikselsel`&lt;alloc::v..</text></g><g><title>pikselsel`__rdl_alloc (1 samples, 0.10%)</title><rect x="84.2528%" y="165" width="0.1003%" height="15" fill="rgb(247,173,49)" fg:x="840" fg:w="1"/><text x="84.5028%" y="175.50"></text></g><g><title>pikselsel`DYLD-STUB$$free (3 samples, 0.30%)</title><rect x="84.3531%" y="181" width="0.3009%" height="15" fill="rgb(224,114,35)" fg:x="841" fg:w="3"/><text x="84.6031%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (43 samples, 4.31%)</title><rect x="86.7603%" y="165" width="4.3129%" height="15" fill="rgb(245,159,27)" fg:x="865" fg:w="43"/><text x="87.0103%" y="175.50">libsy..</text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.70%)</title><rect x="91.0732%" y="165" width="0.7021%" height="15" fill="rgb(245,172,44)" fg:x="908" fg:w="7"/><text x="91.3232%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.70%)</title><rect x="91.0732%" y="149" width="0.7021%" height="15" fill="rgb(236,23,11)" fg:x="908" fg:w="7"/><text x="91.3232%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (14 samples, 1.40%)</title><rect x="91.7753%" y="165" width="1.4042%" height="15" fill="rgb(205,117,38)" fg:x="915" fg:w="14"/><text x="92.0253%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (14 samples, 1.40%)</title><rect x="91.7753%" y="149" width="1.4042%" height="15" fill="rgb(237,72,25)" fg:x="915" fg:w="14"/><text x="92.0253%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (14 samples, 1.40%)</title><rect x="91.7753%" y="133" width="1.4042%" height="15" fill="rgb(244,70,9)" fg:x="915" fg:w="14"/><text x="92.0253%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.10%)</title><rect x="93.1795%" y="165" width="0.1003%" height="15" fill="rgb(217,125,39)" fg:x="929" fg:w="1"/><text x="93.4295%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.30%)</title><rect x="93.2798%" y="165" width="0.3009%" height="15" fill="rgb(235,36,10)" fg:x="930" fg:w="3"/><text x="93.5298%" y="175.50"></text></g><g><title>pikselsel`pikselsel::sender::sendloop (313 samples, 31.39%)</title><rect x="66.3992%" y="197" width="31.3942%" height="15" fill="rgb(251,123,47)" fg:x="662" fg:w="313"/><text x="66.6492%" y="207.50">pikselsel`pikselsel::sender::sendloop</text></g><g><title>pikselsel`pikselsel::sender::send (131 samples, 13.14%)</title><rect x="84.6540%" y="181" width="13.1394%" height="15" fill="rgb(221,13,13)" fg:x="844" fg:w="131"/><text x="84.9040%" y="191.50">pikselsel`pikselsel:..</text></g><g><title>pikselsel`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_cold (42 samples, 4.21%)</title><rect x="93.5807%" y="165" width="4.2126%" height="15" fill="rgb(238,131,9)" fg:x="933" fg:w="42"/><text x="93.8307%" y="175.50">pikse..</text></g><g><title>pikselsel`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (42 samples, 4.21%)</title><rect x="93.5807%" y="149" width="4.2126%" height="15" fill="rgb(211,50,8)" fg:x="933" fg:w="42"/><text x="93.8307%" y="159.50">pikse..</text></g><g><title>libsystem_kernel.dylib`__sendto (42 samples, 4.21%)</title><rect x="93.5807%" y="133" width="4.2126%" height="15" fill="rgb(245,182,24)" fg:x="933" fg:w="42"/><text x="93.8307%" y="143.50">libsy..</text></g><g><title>pikselsel`pikselsel::main (987 samples, 99.00%)</title><rect x="0.9027%" y="213" width="98.9970%" height="15" fill="rgb(242,14,37)" fg:x="9" fg:w="987"/><text x="1.1527%" y="223.50">pikselsel`pikselsel::main</text></g><g><title>pikselsel`rand::rng::Rng::gen_range (21 samples, 2.11%)</title><rect x="97.7934%" y="197" width="2.1063%" height="15" fill="rgb(246,228,12)" fg:x="975" fg:w="21"/><text x="98.0434%" y="207.50">p..</text></g><g><title>pikselsel`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (1 samples, 0.10%)</title><rect x="99.7994%" y="181" width="0.1003%" height="15" fill="rgb(213,55,15)" fg:x="995" fg:w="1"/><text x="100.0494%" y="191.50"></text></g><g><title>pikselsel`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (1 samples, 0.10%)</title><rect x="99.7994%" y="165" width="0.1003%" height="15" fill="rgb(209,9,3)" fg:x="995" fg:w="1"/><text x="100.0494%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (1 samples, 0.10%)</title><rect x="99.7994%" y="149" width="0.1003%" height="15" fill="rgb(230,59,30)" fg:x="995" fg:w="1"/><text x="100.0494%" y="159.50"></text></g><g><title>all (997 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="997"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld`start (997 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="997"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>pikselsel`main (997 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="997"/><text x="0.2500%" y="303.50">pikselsel`main</text></g><g><title>pikselsel`std::rt::lang_start (997 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="997"/><text x="0.2500%" y="287.50">pikselsel`std::rt::lang_start</text></g><g><title>pikselsel`std::rt::lang_start_internal (997 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="997"/><text x="0.2500%" y="271.50">pikselsel`std::rt::lang_start_internal</text></g><g><title>pikselsel`std::rt::lang_start::_{{closure}} (996 samples, 99.90%)</title><rect x="0.1003%" y="245" width="99.8997%" height="15" fill="rgb(240,125,3)" fg:x="1" fg:w="996"/><text x="0.3503%" y="255.50">pikselsel`std::rt::lang_start::_{{closure}}</text></g><g><title>pikselsel`std::sys_common::backtrace::__rust_begin_short_backtrace (996 samples, 99.90%)</title><rect x="0.1003%" y="229" width="99.8997%" height="15" fill="rgb(205,98,50)" fg:x="1" fg:w="996"/><text x="0.3503%" y="239.50">pikselsel`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>pikselsel`rand::rng::Rng::gen_range (1 samples, 0.10%)</title><rect x="99.8997%" y="213" width="0.1003%" height="15" fill="rgb(205,185,37)" fg:x="996" fg:w="1"/><text x="100.1497%" y="223.50"></text></g></svg></svg>